name: Auto Add Issues and PRs to Azure Project 

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual runs

jobs:
  add-items-to-project:
    runs-on: ubuntu-latest

    steps:
    - name: Search Issues and PRs Matching Query
      id: search-items
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.AZURE_PROJECT_TOKEN }}
        script: |
          const query = `
            is:open
            updated:>2024-09-01
            involves:jackfrancis involves:dtzar involves:willie-yao
            involves:mboersma involves:jont828 involves:nawazkh
            involves:nojnhuh involves:mbrow137
            repo:kubernetes-sigs/cluster-api-provider-azure
            repo:kubernetes-sigs/cluster-api
            repo:kubernetes-sigs/image-builder
            repo:kubernetes/autoscaler
            repo:kubernetes/enhancements
            repo:kubernetes/kubernetes
            repo:kubernetes-sigs/cloud-provider-azure
            repo:kubernetes/perf-tests
            repo:kubernetes/test-infra
            repo:kubernetes/cluster-api-addon-provider-helm
            repo:kubernetes/azure-service-operator
            repo:Azure/karpenter-poc
            repo:kubernetes/autoscaler
            repo:Azure/dalec-build-defs
            repo:kubernetes-sigs/mcs-api
          `.replace(/\s+/g, ' ').trim(); // Compact query string

          // Step 1: Search Items (Issues and PRs)
          const results = await github.rest.search.issuesAndPullRequests({ q: query, per_page: 100 });
          const items = results.data.items;
          if (items.length === 0) {
            console.log("No issues or PRs found matching the query.");
            return;
          }
          console.log(`Found ${items.length} item(s) to process.`);

          const projectId = "PVT_kwDOAGhwUs4Aq7De";
          const fieldIdInvolves = "PVTF_lADOAGhwUs4Aq7DezgkWelY";
          const queryProjectAdd = `
            mutation AddProjectV2ItemById($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }
          `;
          const queryProjectUpdateField = `
            mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: $value
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `;

          for (const item of items) {
            try {
              // Validate that the repository URL exists
              if (!item.repository_url) {
                console.error(`Item #${item.number} does not have a valid repository.`);
                continue;
              }

              // Extract repository details from the URL
              const repoUrlParts = item.repository_url.split("/");
              const owner = repoUrlParts[repoUrlParts.length - 2];
              const repo = repoUrlParts[repoUrlParts.length - 1];

              // Check if the item is a PR or an Issue
              const isPR = item.pull_request !== undefined;
              const involvedPeople = new Set();

              if (isPR) {
                // Fetch detailed PR metadata
                const prDetails = await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number: item.number,
                });

                // Extract involved people for PR
                involvedPeople.add(prDetails.data.user?.login); // Author
                prDetails.data.assignees.forEach(assignee => involvedPeople.add(assignee.login)); // Assignees
                prDetails.data.requested_reviewers.forEach(reviewer => involvedPeople.add(reviewer.login)); // Reviewers
                const bodyMentions = (prDetails.data.body.match(/@\w+/g) || []).map(mention => mention.slice(1));
                bodyMentions.forEach(mention => involvedPeople.add(mention)); // Mentions
              } else {
                // Fetch detailed Issue metadata
                const issueDetails = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: item.number,
                });

                // Extract involved people for Issue
                involvedPeople.add(issueDetails.data.user?.login); // Author
                issueDetails.data.assignees.forEach(assignee => involvedPeople.add(assignee.login)); // Assignees
                const bodyMentions = (issueDetails.data.body.match(/@\w+/g) || []).map(mention => mention.slice(1));
                bodyMentions.forEach(mention => involvedPeople.add(mention)); // Mentions
              }

              // Match involved users against query users
              const queryUsers = [
                "jackfrancis", "dtzar", "willie-yao",
                "mboersma", "jont828", "nawazkh",
                "nojnhuh", "mbrow137"
              ];
              const matchedUsers = Array.from(involvedPeople).filter(user => queryUsers.includes(user));

              // Add the item to the project
              const addResult = await github.graphql(queryProjectAdd, {
                projectId,
                contentId: item.node_id,
              });
              const itemId = addResult.addProjectV2ItemById.item.id;

              // Update the "Involves" field
              const involvesValue = { text: matchedUsers.join(", ") };
              await github.graphql(queryProjectUpdateField, {
                projectId,
                itemId,
                fieldId: fieldIdInvolves,
                value: involvesValue,
              });
              console.log(`Updated "Involves" field for ${isPR ? 'PR' : 'Issue'} #${item.number} with value: ${involvesValue.text}`);
            } catch (error) {
              console.error(`Failed to process item #${item.number}: ${error.message}`);
            }
          }
