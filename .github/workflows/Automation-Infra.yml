name: Auto Add Involved PRs to Azure Project 

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual runs

jobs:
  add-prs-to-project:
    runs-on: ubuntu-latest

    steps:
    - name: Search PRs Matching Query
      id: search-prs
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.AZURE_PROJECT_TOKEN }}
        script: |
          const query = `
            is:pr is:open
            updated:>2024-09-01
            involves:jackfrancis involves:dtzar involves:willie-yao
            involves:mboersma involves:jont828 involves:nawazkh
            involves:nojnhuh involves:mbrow137
            repo:kubernetes-sigs/cluster-api-provider-azure
            repo:kubernetes-sigs/cluster-api
            repo:kubernetes-sigs/image-builder
            repo:kubernetes/autoscaler
            repo:kubernetes/enhancements
            repo:kubernetes/kubernetes
            repo:kubernetes-sigs/cloud-provider-azure
            repo:kubernetes/perf-tests
            repo:kubernetes/test-infra
            repo:kubernetes/cluster-api-addon-provider-helm
            repo:kubernetes/azure-service-operator
            repo:Azure/karpenter-poc
            repo:kubernetes/autoscaler
            repo:Azure/dalec-build-defs
            repo:kubernetes-sigs/mcs-api
          `.replace(/\s+/g, ' ').trim(); // Compact query string

          // Step 1: Search PRs
          const results = await github.rest.search.issuesAndPullRequests({ q: query, per_page: 100 });
          const prs = results.data.items;
          if (prs.length === 0) {
            console.log("No PRs found matching the query.");
            return;
          }
          console.log(`Found ${prs.length} PR(s) to process.`);

          const projectId = "PVT_kwDOAGhwUs4Aq7De";
          const fieldIdInvolves = "PVTF_lADOAGhwUs4Aq7DezgkWelY";
          const queryProjectAdd = `
            mutation AddProjectV2ItemById($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }
          `;
          const queryProjectUpdateField = `
            mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: $value
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `;

          for (const pr of prs) {
            try {
              // Fetch detailed PR metadata
              const prDetails = await github.rest.pulls.get({
                owner: pr.repository.owner.login,
                repo: pr.repository.name,
                pull_number: pr.number,
              });

              // Extract involved users
              const involvedPeople = new Set();

              // Check author
              const author = prDetails.data.user?.login;
              if (author) involvedPeople.add(author);

              // Check assignees
              prDetails.data.assignees.forEach(assignee => involvedPeople.add(assignee.login));

              // Check requested reviewers
              prDetails.data.requested_reviewers.forEach(reviewer => involvedPeople.add(reviewer.login));

              // Check mentions in body
              const bodyMentions = (prDetails.data.body.match(/@\w+/g) || []).map(mention => mention.slice(1));
              bodyMentions.forEach(mention => involvedPeople.add(mention));

              // Match involved users against query users
              const queryUsers = [
                "jackfrancis", "dtzar", "willie-yao",
                "mboersma", "jont828", "nawazkh",
                "nojnhuh", "mbrow137"
              ];
              const matchedUsers = Array.from(involvedPeople).filter(user => queryUsers.includes(user));

              // Add PR to project
              const addResult = await github.graphql(queryProjectAdd, {
                projectId,
                contentId: pr.node_id,
              });
              const itemId = addResult.addProjectV2ItemById.item.id;

              // Update the "Involves" field
              const involvesValue = { text: matchedUsers.join(", ") };
              await github.graphql(queryProjectUpdateField, {
                projectId,
                itemId,
                fieldId: fieldIdInvolves,
                value: involvesValue,
              });
              console.log(`Updated "Involves" field for PR #${pr.number} with value: ${involvesValue.text}`);
            } catch (error) {
              console.error(`Failed to process PR #${pr.number}: ${error.message}`);
            }
          }

