name: Auto Add PRs to Project (Beta)

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily
  workflow_dispatch: # Allow manual runs

jobs:
  add-prs-to-project:
    runs-on: ubuntu-latest

    steps:
    - name: Search PRs Matching Query
      id: search-prs
      uses: actions/github-script@v7
      with:
        script: |
          // Debugging: Log start of the step
          console.log("Starting search for PRs...");

          const query = "sort:created-asc is:pr is:open author:jackfrancis author:dtzar author:willie-yao author:mboersma author:jont828 author:nawazkh author:marosset repo:kubernetes-sigs/cluster-api-provider-azure repo:kubernetes-sigs/cluster-api repo:kubernetes-sigs/image-builder repo:kubernetes/autoscaler repo:kubernetes/enhancements repo:kubernetes/kubernetes repo:Azure/aks-engine repo:kubernetes-sigs/cloud-provider-azure repo:kubernetes/perf-tests repo:kubernetes/test-infra repo:Azure/azure-capi-cli-extension";

          let results;
          try {
            results = await github.rest.search.issuesAndPullRequests({ q: query });
            console.log("API Response:", JSON.stringify(results, null, 2)); // Debug: Log full API response
          } catch (error) {
            console.error("Error fetching PRs:", error.message); // Debug: Log error
            core.setFailed(`Failed to fetch PRs: ${error.message}`);
            return;
          }

          if (!results.data || results.data.items.length === 0) {
            console.log("No matching PRs found."); // Debug: Log empty response
            core.setOutput('prs', JSON.stringify([])); // Set an empty array as output
            return;
          }

          console.log("Found PRs:", JSON.stringify(results.data.items, null, 2)); // Debug: Log found PRs
          core.setOutput('prs', JSON.stringify(results.data.items)); // Pass PRs to the next step

    - name: Add PRs to Project (Beta)
      uses: actions/github-script@v7
      with:
        script: |
          // Debugging: Log start of the step
          console.log("Starting to add PRs to the project...");

          const prs = JSON.parse(core.getInput('prs')); // Retrieve PRs from previous step

          if (!prs || prs.length === 0) {
            console.log("No PRs to add to the project."); // Debug: Log no PRs
            return;
          }

          const projectId = "PVT_kwHOCAOYJ84AtKVY"; // Replace with your Projects (Beta) ID

          for (const pr of prs) {
            const mutation = `
              mutation {
                addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${pr.id}"}) {
                  item {
                    id
                  }
                }
              }
            `;

            try {
              const response = await github.graphql(mutation);
              console.log(`Successfully added PR ${pr.id} to project:`, response); // Debug: Log success
            } catch (error) {
              console.error(`Failed to add PR ${pr.id} to project:`, error.message); // Debug: Log error
            }
          }

          console.log("Finished adding PRs to the project."); // Debug: Log completion
