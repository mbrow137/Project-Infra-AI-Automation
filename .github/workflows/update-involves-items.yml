name: Update Involvement for Team Members

on:
  workflow_dispatch: # Manual trigger only

jobs:
  update-columns:
    runs-on: ubuntu-latest

    steps:
    - name: Update Team Member Columns
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECT_TOKEN }}
        script: |
          const projectId = "PVT_kwHOCAOYJ84AtQGI"; // Replace with your project ID
          const userFieldIds = {
            "Jack": "PVTF_lAHOCAOYJ84AtQGIzgkTDfk",       // Replace with actual field ID for "Jack"
            "David": "PVTF_lAHOCAOYJ84AtQGIzgkTDfo",     // Replace with actual field ID for "David"
            "Willie": "PVTF_lAHOCAOYJ84AtQGIzgkTEFY",   // Replace with actual field ID for "Willie"
            "Matt": "PVTF_lAHOCAOYJ84AtQGIzgkTED0",       // Replace with actual field ID for "Matt"
            "Jonathan": "PVTF_lAHOCAOYJ84AtQGIzgkTDfw", // Replace with actual field ID for "Jonathan"
            "Nawaz": "PVTF_lAHOCAOYJ84AtQGIzgkTEDA",     // Replace with actual field ID for "Nawaz"
            "Jon": "PVTF_lAHOCAOYJ84AtQGIzgkTEBY",       // Replace with actual field ID for "Jon"
            "Morgan": "PVTF_lAHOCAOYJ84AtQGIzgkTDfs"    // Replace with actual field ID for "Morgan"
          };

          const usernameMapping = {
            "jackfrancis": "Jack",
            "dtzar": "David",
            "willie-yao": "Willie",
            "mboersma": "Matt",
            "jont828": "Jonathan",
            "nawazkh": "Nawaz",
            "nojnhuh": "Jon",
            "mbrow137": "Morgan"
          };

          // GraphQL query to fetch project items
          const getProjectItemsQuery = `
            query GetProjectItems($projectId: ID!, $after: String) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, after: $after) {
                    nodes {
                      id
                      content {
                        __typename
                        ... on PullRequest {
                          number
                          title
                          author {
                            login
                          }
                          assignees(first: 10) {
                            nodes {
                              login
                            }
                          }
                          participants(first: 10) {
                            nodes {
                              login
                            }
                          }
                          reviews(first: 10) {
                            nodes {
                              author {
                                login
                              }
                            }
                          }
                        }
                        ... on Issue {
                          number
                          title
                          author {
                            login
                          }
                          assignees(first: 10) {
                            nodes {
                              login
                            }
                          }
                          participants(first: 10) {
                            nodes {
                              login
                            }
                          }
                        }
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }
          `;

          // GraphQL mutation to update the user columns
          const updateFieldMutation = `
            mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: $value
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `;

          let hasNextPage = true;
          let cursor = null;

          // Loop through paginated results
          while (hasNextPage) {
            const projectItems = await github.graphql(getProjectItemsQuery, { projectId, after: cursor });
            const items = projectItems.node.items.nodes;

            if (items.length === 0) {
              console.log("No items found in the project.");
              return;
            }

            console.log(`Processing ${items.length} item(s)...`);

            for (const item of items) {
              if (item.content) {
                let contentType = item.content.__typename;

                if (contentType === "PullRequest" || contentType === "Issue") {
                  const content = item.content;

                  // Collect involved users
                  const involvedUsers = Array.from(new Set([
                    content.author?.login, // Author
                    ...content.assignees.nodes.map(a => a.login), // Assignees
                    ...content.participants.nodes.map(p => p.login), // Participants
                    ...(content.reviews?.nodes.map(r => r.author?.login) || []) // Reviewers (Pull Requests only)
                  ]));

                  // Update each user's column with 1 or blank
                  for (const username of involvedUsers) {
                    const columnName = usernameMapping[username];
                    if (columnName) {
                      const fieldId = userFieldIds[columnName];
                      if (fieldId) {
                        const value = { number: 1 }; // Set to 1 for involved users
                        try {
                          const updateFieldVariables = {
                            projectId,
                            itemId: item.id,
                            fieldId,
                            value,
                          };
                          await github.graphql(updateFieldMutation, updateFieldVariables);
                          console.log(`Updated column ${columnName} for item ${item.id}`);
                        } catch (error) {
                          console.error(`Failed to update column ${columnName} for item ${item.id}: ${error.message}`);
                        }
                      }
                    }
                  }
                }
              }
            }

            // Check for next page and set the cursor
            hasNextPage = projectItems.node.items.pageInfo.hasNextPage;
            cursor = projectItems.node.items.pageInfo.endCursor;
          }

          console.log("Finished processing all project items.");
